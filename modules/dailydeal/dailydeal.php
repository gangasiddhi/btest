<?php/** Module JQuery Pisces slider **/class DailyDeal extends Module{	/** @var max image size */ 	protected $maxImageSize = 99913307200;	protected $_xml; 	function __construct() 	{ 	 	$this->name = 'dailydeal';		$this->tab = 'front_office_features'; 	 	$this->version = '1.4';		/* The parent construct is required for translations */	 	parent::__construct();		$this->page = basename(__FILE__, '.php');	 	$this->displayName = $this->l('Daily Deal');	 	$this->description = $this->l('Show the images on dailybasis');		$this->_xml = $this->_getXml();        $this->log = Logger::getLogger(get_class($this)); 	}    function install()    {        if (!parent::install() OR !$this->registerHook('dailyDeal') OR !$this->registerHook('header') OR !$this->registerHook('addShippingDiscount'))            return false;        return true;    }	public function uninstall() {		return (parent::uninstall());	}	function putContent($xml_data, $key, $field)	{		$field = htmlspecialchars($field);		if (!$field)			return 0;		return ("\n".'		<'.$key.'>'.$field.'</'.$key.'>');	} 	function getContent() {        global $cookie;        /* Languages preliminaries */        $defaultLanguage = intval(Configuration::get('PS_LANG_DEFAULT'));        $languages = Language::getLanguages();        $iso = Language::getIsoById($defaultLanguage);        $isoUser = Language::getIsoById(intval($cookie->id_lang));       	$output = ''; 	 	/* display the module name */ 	 	$this->_html = '<h2>'.$this->displayName.' '.$this->version.'</h2>'; 	 	/* update the editorial xml */ 	 	if (isset($_POST['submitUpdate'])) {			// Generate new XML data 	 	 	$newXml = '<?xml version=\'1.0\' encoding=\'utf-8\' ?>'."\n";			$newXml .= '<links>'."\n";			$i = 0;            $error = false;            $imageUris = array();			foreach ($_POST['link'] as $link) {				$newXml .= '	<link>';				foreach ($link AS $key => $field) {					if ($line = $this->putContent($newXml, $key, $field)) {						$newXml .= $line;                    }				}				/* upload the image */				if (isset($_FILES['link_' . $i . '_img'])                    AND isset($_FILES['link_' . $i . '_img']['tmp_name'])                    AND ! empty($_FILES['link_' . $i . '_img']['tmp_name'])) {					Configuration::set('PS_IMAGE_GENERATION_METHOD', 1);					if ($error = checkImage($_FILES['link_' . $i . '_img'], $this->maxImageSize)) {						$this->_html .= $error;                    } elseif (! move_uploaded_file($_FILES['link_' . $i . '_img']['tmp_name'], dirname(__FILE__) . '/slides/slide_0' . $i . '.jpg')) {						$this->_html .= $this->displayError($this->l('An error occurred during the image upload.'));                        $error = true;                    }				}				if ($line = $this->putContent($newXml, 'img', 'slides/slide_0' . $i . '.jpg')) {					$newXml .= $line;                }				$newXml .= "\n".'	</link>'."\n";                $imageUris[] = _MODULE_DIR_ . '/dailydeal/slides/slide_0' . $i . '.jpg';				$i++;			}			$newXml .= '</links>'."\n";			/* write it into the editorial xml file */			if ($fd = @fopen(dirname(__FILE__) . '/links.xml', 'w')) {				if (! @fwrite($fd, $newXml)) {					$this->_html .= $this->displayError($this->l('Unable to write to the editor file.'));                    $error = true;                }				if (! @fclose($fd)) {					$this->_html .= $this->displayError($this->l('Can\'t close the editor file.'));                    $error = true;                }			} else {				$this->_html .= $this->displayError($this->l('Unable to update the editor file.<br />Please check the editor file\'s writing permissions.'));                $error = true;            }            if (! $error) {                // invalidate CDN images..                Module::hookExec('invalidateCDN', array('uris' => $imageUris));            } 	 	}		if (Tools::isSubmit('submitUpdate')) {			$output .= '<div class="conf confirm"><img src="../img/admin/ok.gif" alt="'.$this->l('Confirmation').'" />'.$this->l('Settings updated').'</div>';		} 		/* display the editorial's form */ 	 	$this->_displayForm(); 	 	return $this->_html; 	}	static private function getXmlFilename()	{		return 'links.xml';	}	private function _getXml()	{		if (file_exists(dirname(__FILE__).'/'.$this->getXmlFilename()))		{			if ($xml = @simplexml_load_file(dirname(__FILE__).'/'.$this->getXmlFilename()))				return $xml;		}		return false;	}    public function bindDatepicker($id, $time)    {        if ($time)        echo '            var dateObj = new Date();            var hours = dateObj.getHours();            var mins = dateObj.getMinutes();            var secs = dateObj.getSeconds();            if (hours < 10) { hours = "0" + hours; }            if (mins < 10) { mins = "0" + mins; }            if (secs < 10) { secs = "0" + secs; }            var time = " "+hours+":"+mins+":"+secs;';        echo '        $(function() {            $("#'.$id.'").datepicker({                prevText:"",                nextText:"",                dateFormat:"yy-mm-dd"'.($time ? '+time' : '').'});        });';    }    // id can be a identifier or an array of identifiers    public function includeDatepicker($id, $time = true)    {        global $cookie;        echo '<script type="text/javascript" src="'.__PS_BASE_URI__.'js/jquery/jquery-ui-1.8.10.custom.min.js"></script>';        $iso = Db::getInstance()->getValue('SELECT iso_code FROM '._DB_PREFIX_.'lang WHERE `id_lang` = '.(int)($cookie->id_lang));        if ($iso != 'en')            echo '<script type="text/javascript" src="'.__PS_BASE_URI__.'js/jquery/datepicker/ui/i18n/ui.datepicker-'.$iso.'.js"></script>';        echo '<script type="text/javascript">';            if (is_array($id))                foreach ($id as $id2)                    $this->bindDatepicker($id2, $time);            else                $this->bindDatepicker($id, $time);        echo '</script>';    }	public function _getFormItem($i, $last)	{		global $cookie;        $this->includeDatepicker(array('datepickerFrom'.$i, 'datepickerTo'.$i));        $currentDate = date("Y-m-d");		$this->_xml = $this->_getXml();		$isoUser = Language::getIsoById(intval($cookie->id_lang));		$output = '			<div class="item" id="item'.$i.'">				<h3>'.$this->l('Item #').($i+1).'</h3>				<input type="hidden" name="item_'.$i.'_item" value="" />';		$output .= '				<label>'.$this->l('Image').'</label>				<div class="margin-form">					<div><img src="'.$this->_mediaServerPath.$this->_path.'slides/slide_0'.$i.'.jpg" alt="" title="" style="width:250px; height:auto;" /></div>					<input type="file" name="link_'.$i.'_img" />					<p style="clear: both"></p>				</div>';		$output .= '				<label>'.$this->l('Product URL').'</label>				<div class="margin-form" style="padding-left:0">					<input type="text" name="link['.$i.'][url]" size="64" value="'.$this->_xml->link[$i]->url.'" />					<p style="clear: both"></p>				</div>';		$output .= '				<label>'.$this->l('Product Price').'</label>				<div class="margin-form" style="padding-left:0">					<input type="text" name="link['.$i.'][prod_price]" size="20" value="'.$this->_xml->link[$i]->prod_price.'" />					<p style="clear: both"></p>				</div>';        $output .= '				<label>'.$this->l('Product Discounted Price').'</label>				<div class="margin-form" style="padding-left:0">					<input type="text" name="link['.$i.'][prod_disc_price]" size="20" value="'.$this->_xml->link[$i]->prod_disc_price.'" />					<p style="clear: both"></p>				</div>';        $output .= '				<label>'.$this->l('Start Date').'</label>				<div class="margin-form" style="padding-left:0">					<input type="text" name="link['.$i.'][datepickerFrom]" id="datepickerFrom'.$i.'" size="20" value="'.$this->_xml->link[$i]->datepickerFrom.'" />					<p style="clear: both"></p>				</div>';        $output .= '				<label>'.$this->l('End Date').'</label>				<div class="margin-form" style="padding-left:0">					<input type="text" name="link['.$i.'][datepickerTo]" id="datepickerTo'.$i.'" size="20" value="'.$this->_xml->link[$i]->datepickerTo.'" />					<p style="clear: both"></p>				</div>';		$output .= '				<div class="clear pspace"></div>				'.($i >= 0 ? '<a href="javascript:{}" onclick="removeDiv(\'item'.$i.'\')" style="color:#EA2E30"><img src="'._PS_ADMIN_IMG_.'delete.gif" alt="'.$this->l('delete').'" />'.$this->l('Delete this item').'</a>' : '').'			<hr/></div>';		return $output;	} 	private function _displayForm() 	{        global $cookie;        /* Languages preliminaries */        $defaultLanguage = intval(Configuration::get('PS_LANG_DEFAULT'));        $languages = Language::getLanguages();        $iso = Language::getIsoById($defaultLanguage);        $isoUser = Language::getIsoById(intval($cookie->id_lang)); 	 	/* xml loading */ 	 	$xml = false; 	 	if (file_exists(dirname(__FILE__).'/links.xml'))		  	if (!$xml = @simplexml_load_file(dirname(__FILE__).'/links.xml'))		  		$this->_html .= $this->displayError($this->l('Your links file is empty.'));		        $this->_html .= '		<script type="text/javascript">		function removeDiv(id)		{            var del_id=id.match(/[0-9]/gi);			$("#"+id).fadeOut("slow");            $.get("'._MODULE_DIR_.$this->name.'/slide_image.php?id="+del_id, function(data) {                $("#"+id).remove();			});		}		function cloneIt(cloneId) {			var currentDiv = $(".item:last");			var id = ($(currentDiv).size()) ? $(currentDiv).attr("id").match(/[0-9]/gi) : -1;			var nextId = parseInt(id) + 1;			$.get("'._MODULE_DIR_.$this->name.'/ajax.php?id="+nextId, function(data) {				$("#items").append(data);			});			$("#"+cloneId).remove();		}		</script>		<form method="post" action="'.$_SERVER['REQUEST_URI'].'" enctype="multipart/form-data">			<fieldset style="width: 800px;">        		<legend><img src="'.$this->_path.'logo.gif" alt="" title="" /> '.$this->displayName.'</legend>					<div id="items">';						$i = 0;						foreach ($xml->link as $link)						{							$last = ($i == (count($xml->link)-1) ? true : false);							$this->_html .= $this->_getFormItem($i, $last);							$i++;						}						$this->_html .= '				</div>				<a id="clone'.$i.'" href="javascript:cloneIt(\'clone'.$i.'\')" style="color:#488E41"><img src="'._PS_ADMIN_IMG_.'add.gif" alt="'.$this->l('add').'" /><b>'.$this->l('Add a new item').'</b></a>';		$this->_html .= '				<div class="margin-form clear">					<div class="clear pspace"></div>					<div class="margin-form">						 <input type="submit" name="submitUpdate" value="'.$this->l('Save').'" class="button" />					</div>				</div>				</fieldset>			</form>'; 	}	function hookDailyDeal($params) 	{        global $cookie;        /* Languages preliminaries */        $defaultLanguage = intval(Configuration::get('PS_LANG_DEFAULT'));        $languages = Language::getLanguages();        $iso = Language::getIsoById($defaultLanguage);        $isoUser = Language::getIsoById(intval($cookie->id_lang));        $currentDate = date('Y-m-d H:i:s');        $currentDate_time=strtotime($currentDate);        $current_time = time(); //strtotime(date("G:i"));        /*if ($params['cookie']->logged AND $params['cookie']->id_customer) {*/ 	 	if (file_exists(dirname(__FILE__).'/links.xml')) 	 		if ($xml = simplexml_load_file(dirname(__FILE__).'/links.xml')) 	 		{                global $cookie, $smarty;                $count=0;                foreach ($xml->link as $key => $value){                    $from_date=  explode(' ', $value->datepickerFrom);                    $to_date=explode(' ',$value->datepickerTo);                    $date_from = new DateTime($from_date[0]);                    $date_to = new DateTime($to_date[0]);                    //$from_date_time = strtotime($from_date[0]);                    //$to_date_time =  strtotime($to_date[0]);                    $from_date_time = strtotime($value->datepickerFrom);                    $to_date_time = strtotime($value->datepickerTo);                    if($currentDate_time <= $to_date_time && $currentDate_time >=$from_date_time){                        $total_time_diff=$to_date_time - $currentDate_time;                        $shipping_time = $total_time_diff;                        //$date_diff_time =  ($to_date_time -$currentDate_time)/86400;                        //$shipping_time = strtotime("23:59 +".$date_diff_time." days") - $current_time;                        $smarty->assign(array(                            'xml' => $xml,                            'this_path' => $this->_path,                            'no_of_imgs' => count($value),                            'height' => 550,                            'current_time' => $currentDate_time,                            'from_date_time' => $from_date_time,                            'to_date_time' => $to_date_time,                            'count'=>$count,                            'shipping_time' => $shipping_time                        ));                        return $this->display(__FILE__, 'dailydeal.tpl');                         break;                    }                    $count++;                }			}        /*}*/		return false; 	}    /* Applying Shipping Discount for Dailydeal starts here*/     public function hookAddShippingDiscount($params) {         global $cookie, $smarty, $cart;                  $discounts = Discount::getDiscountIdByname('dailydealproduct');         $cart_products = $cart->getProducts();         $deal_category_id=Configuration::get('DAILYDEAL_CATEGORY_ID');         $prodIdInDailydealCategory=Product::pIdBelongToCategoryId($cart_products, $deal_category_id);         $productCategories = Product::getProductCategories($prodIdInDailydealCategory);                  foreach($cart_products as $cart_product) {             $cart_products_array[]=$cart_product['id_product'];         }         $explode_cart_products_array= implode(',', $cart_products_array);                  if(in_array($prodIdInDailydealCategory, $cart_products_array)==FALSE){             $cart->deleteDiscount((int) ($discounts['id_discount']));                       }                  if(in_array($deal_category_id, $productCategories)){                                     if($prodIdInDailydealCategory !=''){                                if ($discounts) {                    $errors = array();                    $dailyDealDiscount = new Discount(intval($discounts['id_discount']));                    if (strtolower($dailyDealDiscount->name) === 'dailydealproduct') {                        //checking the validity of the discount.                         if (is_object($dailyDealDiscount) AND $dailyDealDiscount) {                            if ($tmpError = $params['cart']->checkDiscountValidity($dailyDealDiscount, $params['cart']->getDiscounts(), $params['cart']->getOrderTotal(), $params['cart']->getProducts(), true))                                $errors[] = $tmpError;                                $this->log->error($tmpError);                        }                                                            if ($free_ship = Tools::convertPrice((float) (Configuration::get('PS_SHIPPING_FREE_PRICE')), new Currency((int) ($cart->id_currency)))) {                            $discounts = $cart->getDiscounts();                            $total_free_ship = $free_ship - ($summary['total_products_wt'] + $summary['total_discounts']);                            foreach ($discounts as $discount)                                if ($discount['id_discount_type'] == 3) {                                    $total_free_ship = 0;                                    break;                                }                            $smarty->assign('free_ship', $total_free_ship);                        }                        // Add the discounts to the cart.                         if (!sizeof($errors)) {                            if ($params['cart']->getDiscountsCustomer($dailyDealDiscount->id) <= 0)                                $params['cart']->addDiscount((int) ($dailyDealDiscount->id));                        }                    }                }             }         }                 return true;    }    /* Applying Shipping Discount for Dailydeal ends here*/	public function hookHeader($params)	{		if(strpos($_SERVER['PHP_SELF'], 'dailydeal') !== false)		{			Tools::addJS(_PS_JS_DIR_.'jquery/jquery.jcarousel.min.js');			Tools::addJS(_PS_JS_DIR_.'jquery/jquery.jcarousel_start.js');			Tools::addCSS(_PS_CSS_DIR_.'jquery.jcarousel.css', 'all');			Tools::addCSS(_PS_CSS_DIR_.'jquery.jcarousel.skin.css', 'all');			Tools::addCSS($this->_path.'assets/celebrity2.css', 'all');		}	}}?>